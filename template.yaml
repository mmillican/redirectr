AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  LogRetentionInDays:
    Type: Number
    Description: The number of days to keep logs in CloudWatch
    Default: 14
    AllowedValues: [ 1, 7, 14, 30, 60, 90, 120 ]


  # TODO: Support optional custom domain names

  DnsHostedZoneId:
    Type: String
    Description: The Route53 hosted zone ID to create the DNS record for
    Default: ''

  DomainName:
    Type: String
    Description: The zone name for the DNS name. Required if specifying a Hosted Zone ID
    Default: ''

  AcmCertificateArn:
    Type: String
    Description: The ARN of the ACM certificate to use for the CloudFront distribution
    Default: ''

  UserPoolId:
    Type: String
    Description: The ID of the User Pool to use for authenticating the API

  UserPoolApiClientId:
    Type: String
    Description: The client id of the api

Conditions:

  HasHostedZoneId: !Not [ !Equals [ !Ref DnsHostedZoneId, '' ] ]
  HasDomainName: !Not [ !Equals [ !Ref DomainName, '' ] ]

Outputs:
  BucketDomain:
    Value: !GetAtt  ContentBucket.DomainName

  CloudFrontDomain:
    Value: !GetAtt CloudfrontDistro.DomainName

  CognitoAuthUrl:
    Value: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolId}

  CognitoAdminClientId:
    Value: !Ref CognitoWebAppClient

Resources:
  ContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      # AccessControl: PublicRead
      PublicAccessBlockConfiguration:
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: 'index.html'
        ErrorDocument: 'index.html'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  ContentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ContentBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
            Resource: !Sub 'arn:${AWS::Partition}:s3:::${ContentBucket}/redir/*'

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'redirectr storage bucket OAI'

  CloudfrontDistro:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: redirectr CloudFront
        Aliases:
          - !Ref DomainName
        Origins:
          - Id: S3BucketOrigin
            DomainName: !Select [2, !Split ['/', !GetAtt ContentBucket.WebsiteURL]]
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
              HTTPPort: 80
              HTTPSPort: 443
            OriginPath: /redir
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6' # Id for CachingOptimized
          TargetOriginId: S3BucketOrigin
          ViewerProtocolPolicy: redirect-to-https
        CacheBehaviors:
          - PathPattern: '/admin/*'
            TargetOriginId: S3BucketOrigin
            ForwardedValues:
              QueryString: false
            ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn
          SslSupportMethod: sni-only

  ApiFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:* # TODO restrict

        - PolicyName: s3
          PolicyDocument:
            Statement:
              # - Effect: Allow
              #   Action:
              #     - s3:ListAllMyBuckets
              #   Resource: 'arn:aws:s3:::*'

              - Effect: Allow
                Action:
                  - s3:ListBucket*
                Resource: !Sub ${ContentBucket.Arn}

              - Effect: Allow
                Action:
                  - s3:DeleteObject*
                  - s3:GetObject*
                  - s3:PutObject*
                Resource: !Sub ${ContentBucket.Arn}/redir/*

  ServerlessApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        DefaultAuthorizer: OAuth2Authorizer
        Authorizers:
          # Cognito authorizer only works for rest apis
          OAuth2Authorizer:
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolId}
              audience:
                - !Ref UserPoolApiClientId
                - !Ref CognitoWebAppClient
            IdentitySource: "$request.header.Authorization"
      CorsConfiguration:
        AllowOrigins:
          - 'http://localhost:5173'
          # - !Sub 'https://${S3WebsiteStack.Outputs.CloudfrontEndpoint}'
          # - !Sub 'https://${S3WebsiteStack.Outputs.FullDomain}'
        AllowHeaders:
          - Authorization
          - Origin
          - 'Content-Type'
          - Accept
        AllowMethods:
          - DELETE
          - GET
          - OPTIONS
          - POST
          - PUT
        ExposeHeaders:
          - '*'
        MaxAge: 600
        AllowCredentials: true

  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs18.x
      Handler: index.handler
      InlineCode: |
        const { PutObjectCommand, S3Client } = require('@aws-sdk/client-s3');

        const s3 = new S3Client({ region: 'us-east-1' }); // TODO: Get from env?

        function generateSlug(length) {
          let slug = '';
          const chars = 'abcdefghijklmnopqrstuvwxyz0123456789';

          for(var idx = 0; idx < length; idx++) {
            slug += chars.charAt(Math.floor(Math.random() * chars.length));
          }

          return slug;
        }

        exports.handler = async function (event) {
          console.log('event', event);

          // TODO: validate/sanitize inputs

          // TODO: Check for base64 encoding
          var request = JSON.parse(event.body);

          if (!request.shortUrl) {
            request.shortUrl = generateSlug(6);
          }
          var cmd = new PutObjectCommand({
            Bucket: process.env.AWS_BucketName,
            Key: `redir/${request.shortUrl}`,
            Body: '',
            WebsiteRedirectLocation: request.destinationUrl,
          });

          await s3.send(cmd);
          return JSON.stringify({ "shortUrl": request.shortUrl, "url": `https://${process.env.HostName}/${request.shortUrl}` });
        }

      Role: !Sub ${ApiFunctionRole.Arn}
      Environment:
        Variables:
          AWS_BucketName: !Ref ContentBucket
          HostName: !If
            - HasDomainName
            - !Ref DomainName
            - !GetAtt CloudfrontDistro.DomainName
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref ServerlessApi
            Path: '/urls'
            Method: POST
            Auth:
              Authorizer: OAuth2Authorizer
              AuthorizationScopes:
                - api://redirectr-api/urls.read
                - api://redirectr-api/urls.write
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - W3002 # Okay with code as string for now
            - E3030 # Specified valid value according to CFN docs

  ApiFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ApiFunction}'
      RetentionInDays: !Ref LogRetentionInDays
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - I3011 # Ignore update/delete policy warnings

  # TODO: Add Cognito API Client

  CognitoWebAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPoolId
      ClientName: Redirectr Admin
      CallbackURLs:
        - http://localhost:5173/oidc-callback # TODO: use paramter or add additional values
      LogoutURLs:
        - http://localhost:5173/
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - openid
        - profile
        - email
        - api://redirectr-api/urls.read
        - api://redirectr-api/urls.write
      AllowedOAuthFlows:
        - code
        - implicit
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH


  Route53Records:
    Type: AWS::Route53::RecordSetGroup
    Condition: HasHostedZoneId
    Properties:
      HostedZoneId: !Ref DnsHostedZoneId
      RecordSets:
        - Name: !Ref DomainName
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt CloudfrontDistro.DomainName
  # CloudFront Distro
